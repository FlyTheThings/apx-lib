{%- extends 'Mandala.j2' %}

{% set ns = namespace(meta_id=0) %}

{%- macro constants_expand(d, indent, level, uid) -%}
{% set ind = ' '*indent*indent_size %}
{{ ind }}typedef {{ d.type }}_t type_t;
{{ ind }}static constexpr const meta_s &meta{ mandala::meta[{{ ns.meta_id }}] };
{{ ind }}static constexpr const uid_t uid{ meta.uid }; //0x{{ '%0x' % uid }}
{{ ind }}static constexpr const type_id_e type_id{ type_{% if d.content is defined %}void{% else %}{{ d.type }}{% endif %} };
{%- endmacro -%}

{%- macro mandala_expand(d, indent=0, level=0, uid=0) -%}
{% set ind = ' '*indent*indent_size %}
{% if d.content is defined %}
{% set pub = 'tree_'+level|string+'_t<'+d.name+'>' %}
{% else %}
{% set pub = 'tree_value_t<mandala::'+d.type+'_t, '+d.name+'>' %}
{% endif %}
{{ ind }}struct {{ d.name }}: public {{ pub }}
{{ ind }}{
{{ constants_expand(d, indent+1, level+1, uid) }}
{% set ns.meta_id = ns.meta_id+1 %}
{% set uid_pow = data.uid_bits[level+2:]|sum %}
{% set uid_mul = 2**uid_pow %}
{% for i in d.content %}
{% if i.reserved is undefined %}
{{ mandala_expand(i, indent+1, level+1, uid+loop.index0*uid_mul) }}
{% endif %}
{% endfor %}
{{ ind }}};
{%- endmacro -%}

{%- block content -%}
// generated file

#pragma once

#include <Mandala/MandalaTreeBase.h>
#include <Mandala/MandalaMeta.h>

namespace mandala {

{% for i in data.content %}
{% set uid_pow = data.uid_bits[1:]|sum %}
{% set uid_mul = 2**uid_pow %}
{{ mandala_expand(i, 0, 0, data.uid_base+loop.index0*uid_mul) }}
{% endfor %}

}; // namespace

{% endblock %}
