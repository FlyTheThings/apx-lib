{%- extends 'Mandala.j2' %}


{%- block content -%}
// generated file

#pragma once

#include <MandalaMetaBase.h>
#include <MandalaConstants.h>
#include <MandalaPack.h>

namespace mandala {
{% set ind = ' '*indent_size %}
{% set ind1 = ' '*2*indent_size %}

// uid bits by level (level 0=root)
static constexpr const size_t uid_levels = {{ data.uid_bits|length }};

static constexpr const uint8_t uid_bits[] = {
{{ ind }}{% for i in data.uid_bits %}{{ i }},{% endfor %} // total {{ data.uid_bits|sum }} bits, {{ data.uid_bits|length }} levels
};

/*static constexpr const mandala::uid_t uid_level_mask[] = {
{{ ind }}{% for i in data.uid_bits %}{% set mask = (2**(data.uid_bits[loop.index0+1:]|sum)*(2**(data.uid_bits[loop.index0])-1)) %}0x{{ '%0x' % mask }},{% endfor %}

};*/

static constexpr const uint8_t uid_shift[] = {
{{ ind }}{% for i in data.uid_bits %}{{ data.uid_bits[loop.index0+1:]|sum }},{% endfor %}

};

// valid UID range is [uid_base...uid_max]
static constexpr const mandala::uid_t uid_base = 0x{{ '%0x' % data.uid_base }};
static constexpr const mandala::uid_t uid_max = 0x{{ '%0x' % (data.uid_base+(2**(data.uid_bits|sum)-1)) }};

static constexpr bool is_bundle(mandala::uid_t uid) { return (uid & ((1 << uid_bits[uid_levels - 1]) - 1)) == 0; }

// flat array of all elements
static constexpr const mandala::meta_s meta[] = {
{% call(m) mandala_meta() %}
{{ ind }}{
{{ ind1 }}.name = "{{ m.name }}",
{{ ind1 }}.title = "{{ m.title }}",
{{ ind1 }}.descr = "{{ m.descr }}",
{{ ind1 }}.units = "{{ m.units }}", // {{ m.units_label }}
{{ ind1 }}.path = "{{ m.path|join('.') }}",
{{ ind1 }}.uid = 0x{{ '%0x' % m.uid }},
{{ ind1 }}.mask = 0x{{ '%0x' % m.mask }},
{{ ind1 }}.level = {{ m.level }},
{{ ind1 }}.group = {{ m.group }},
{{ ind1 }}.type_id = {{ m.type_id }},
{{ ind1 }}.units_cnt = {{ m.units_cnt }},
{{ ind }}},
{% endcall %}
}; // meta array


}; // namespace mandala

{% endblock %}
